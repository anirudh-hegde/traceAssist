# utils/docker_generator.py

import os

# ─── Dockerfile templates for supported languages ───────────────────────────────
DOCKERFILES = {
    "python": """FROM python:3.9

WORKDIR /app
COPY . .

RUN pip install --no-cache-dir -r requirements.txt
RUN pip install --no-cache-dir \\
    opentelemetry-api \\
    opentelemetry-sdk \\
    opentelemetry-exporter-otlp \\
    opentelemetry-instrumentation

CMD ["opentelemetry-instrument", "--traces_exporter", "otlp", "--metrics_exporter", "otlp", "--logs_exporter", "otlp", "--", "python", "main.py"]
""",
    "node": """FROM node:18

WORKDIR /app
COPY . .

RUN npm ci
RUN npm install --save \\
    @opentelemetry/api \\
    @opentelemetry/sdk-node \\
    @opentelemetry/auto-instrumentations-node \\
    @opentelemetry/exporter-trace-otlp-grpc

# instrumentation.js must have been generated by your setup.sh
COPY instrumentation.js ./instrumentation.js

CMD ["node", "-r", "./instrumentation.js", "index.js"]
""",
    "java": """FROM openjdk:17

WORKDIR /app
COPY . .

# The agent jar must be placed in the app directory by your setup.sh
COPY opentelemetry-javaagent.jar /app/opentelemetry-javaagent.jar

CMD ["java", "-javaagent:/app/opentelemetry-javaagent.jar", "-jar", "app.jar"]
"""
}
# ────────────────────────────────────────────────────────────────────────────────

# ─── docker-compose template that auto-creates its telemetry network ────────────
DOCKER_COMPOSE = """version: '3.8'

services:
  {service_name}:
    build: .
    container_name: {service_name}
    networks:
      - telemetry
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_RESOURCE_ATTRIBUTES=service.name={service_name}

networks:
  telemetry:
    driver: bridge
"""
# ────────────────────────────────────────────────────────────────────────────────

def detect_language(app_path: str) -> str:
    """
    Naively detect the app's language by looking for package.json, .py, .java/.jar files.
    """
    files = os.listdir(app_path)
    if "package.json" in files:
        return "node"
    if any(f.endswith(".py") for f in files):
        return "python"
    if any(f.endswith(".java") or f.endswith(".jar") for f in files):
        return "java"
    return "unknown"

def generate_docker_files(app_id: str, base_dir: str = "user-apps") -> dict:
    """
    Writes a Dockerfile and docker-compose.user.yml into user-apps/{app_id}/.

    Returns:
      { "language": <lang>,
        "dockerfile": <path to Dockerfile>,
        "compose": <path to compose file> }
    or
      { "error": <errmsg> }
    """
    app_path = os.path.join(base_dir, app_id)
    lang = detect_language(app_path)
    if lang == "unknown":
        return {"error": "Unsupported application language."}

    # 1) Write Dockerfile
    dockerfile_path = os.path.join(app_path, "Dockerfile")
    try:
        with open(dockerfile_path, "w") as df:
            df.write(DOCKERFILES[lang])
    except Exception as e:
        return {"error": f"Failed to write Dockerfile: {e}"}

    # 2) Write docker-compose.user.yml
    service_name = f"user-app-{app_id[:8]}"
    compose_path = os.path.join(app_path, "docker-compose.user.yml")
    try:
        with open(compose_path, "w") as cf:
            cf.write(DOCKER_COMPOSE.format(service_name=service_name))
    except Exception as e:
        return {"error": f"Failed to write docker-compose: {e}"}

    return {
        "language": lang,
        "dockerfile": dockerfile_path,
        "compose": compose_path
    }
